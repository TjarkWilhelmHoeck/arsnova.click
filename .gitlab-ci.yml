variables:
  PROJECT_PATH: arsnova.click
  MIRROR_REPO: git@github.com:thm-projects/arsnova.click.git

jshint:
  stage: test
  tags:
    - nodejs
  allow_failure: true
  dependencies: []
  script:
    - npm install jshint@^2.9.0
    - node_modules/jshint/bin/jshint --config .jshintrc $PROJECT_PATH/client/ $PROJECT_PATH/server/ $PROJECT_PATH/shared/

jscs:
  stage: test
  tags:
    - nodejs
  allow_failure: true
  dependencies: []
  script:
    - npm install jscs
    - node_modules/jscs/bin/jscs --config .jscsrc $PROJECT_PATH/{lib,server,shared}/ $PROJECT_PATH/client/{layout,plugins} $PROJECT_PATH/client/routes.js

sonar:
  stage: test
  only:
    - master
    - staging
  tags:
    - gradle
  allow_failure: true
  dependencies: []
  script:
    - gradle sonarqube

build:
  stage: build
  only:
    - master
    - staging
    - /^v[0-9]+/
  tags:
    - meteor
  dependencies: []
  script:
    - test -d package-metadata && rm -rf /opt/meteor/package-metadata && mv package-metadata /opt/meteor/
    - cd "$PROJECT_PATH"
    - printf "browser\nserver\n" > .meteor/platforms
    - meteor --verbose build --directory --server "$STAGING_HTTP_URL" build
    - mv /opt/meteor/package-metadata "$CI_PROJECT_DIR/"
  cache:
    paths:
      - package-metadata
      - $PROJECT_PATH/.meteor/local
  artifacts:
    paths:
      - $PROJECT_PATH/build/bundle/

deploy_staging:
  stage: deploy
  only:
    - staging
  tags:
    - ssh
  dependencies:
    - build
  script:
    - chmod -R a+rX,ug+w "$PROJECT_PATH/build"
    - eval $(ssh-agent -s)
    - mkdir ~/.ssh && echo "$STAGING_SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - ssh-add <(echo "$STAGING_SSH_PRIVATE_KEY")
    - scp -r "$PROJECT_PATH/build/bundle/"* "$STAGING_SSH_URL"

deploy_production:
  stage: deploy
  only:
    - master
  tags:
    - ssh
  dependencies:
    - build
  script:
    - chmod -R a+rX,ug+w build
    - eval $(ssh-agent -s)
    - mkdir ~/.ssh && echo "$PRODUCTION_SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - ssh-add <(echo "$PRODUCTION_SSH_PRIVATE_KEY")
    - scp -r "$PROJECT_PATH/build/bundle/"* "$PRODUCTION_SSH_URL"

sync_mirror:
  stage: deploy
  tags:
    - git
  when: always
  allow_failure: true
  dependencies: []
  script:
    - git clone --bare "$CI_BUILD_REPO" mirror.git
    - cd mirror.git
    - git push --mirror "$MIRROR_REPO"
